name: Cleanup comments

on:

  repository_dispatch:
    # trigger from R via:
    # gh::gh("POST /repos/:owner/:repo/dispatches", owner = "Milano-R", repo = "erum2020-covidr-contest", event_type = "cleanup-utterances")
    types: [lock-utterances-votes]

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup R
        uses: r-lib/actions/setup-r@master
      - name: Install system dependencies
        run: |
          sudo -s eval "apt-get update && apt-get install -y libcurl4-openssl-dev"
      - name: Query dependencies
        run: |
          install.packages("remotes")
          saveRDS(remotes::package_deps(c("gh", "yaml")), "depends.Rds", version = 2)
        shell: Rscript {0}
      - name: Cache R packages
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ hashFiles('depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-
      - name: Install package dependencies
        run: |
          remotes::install_cran(readRDS("depends.Rds")$package)
          remotes::install_github("riccardoporreca/rmdgallery@develop")
        shell: Rscript {0}
      - name: Cleanup extra comments to utterances voting issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          source("contest/_tools/utterances-issues.R")
          votes <- lock_utterances_issues(
            owner = "Milano-R",
            repo = "erum2020-covidr-contest",
            dry_run = TRUE
          )
          message("Votes from ", length(unique(votes$vote)), " users")
          votes <- aggregate(votes["vote"], votes["page_name"], length)
          votes <- votes[rev(order(votes$vote)), ]
          write.csv(votes, "contest/votes.csv", row.names = FALSE)
        shell: Rscript {0}
      - name: Upload votes as artifact
        uses: actions/upload-artifact@v1
        with:
          name: votes
          path: contest/votes.csv
